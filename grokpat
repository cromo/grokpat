#!/usr/bin/env python

import os, re, sys

__version__ = "0.1.0"

def main(pattern_files, requested_patterns, want_raw):
    patterns = load_pattern_files(pattern_files)

    invalid_requested_patterns = [p for p in requested_patterns
        if p not in patterns]
    if invalid_requested_patterns:
        for pattern in invalid_requested_patterns:
            sys.stderr.write("Pattern not found: %s\n" % pattern)
        sys.exit(1)

    flattened_requested_patterns = '|'.join(patterns[p] for p in
        requested_patterns)
    if want_raw:
        sys.stdout.write(flattened_requested_patterns)
        sys.exit(0)
    expanded_pattern = expand_grok_subpatterns(flattened_requested_patterns,
        patterns)
    sys.stdout.write(expanded_pattern)

def load_pattern_files(pattern_files):
    pattern_files = flatten_pattern_file_list(pattern_files)
    patterns = {}
    for pattern_file in pattern_files:
        patterns = dict(patterns.items() + load_pattern_file(pattern_file))
    return patterns

def flatten_pattern_file_list(pattern_file_list):
    return sum([alphabetical_file_listing(f) if os.path.isdir(f) else [f]
        for f in pattern_file_list if os.path.exists(f)], [])

def alphabetical_file_listing(dir):
    return sorted(os.path.join(dir, f) for f in os.listdir(dir)
        if os.path.isfile(os.path.join(dir, f)))

def load_pattern_file(pattern_filename):
    f = open(pattern_filename)
    patterns = parse_patterns(f)
    f.close()
    return patterns

def parse_args(args):
    options = {
        'raw': False,
        'patterns': [],
        'pattern-files': get_default_pattern_files()
    }
    for arg in args:
        if arg in ('-h', '--help'):
            print_usage()
            sys.exit(0)
        if arg in ('-v', '--version'):
            print_version()
            sys.exit(0)
        if arg == '--raw':
            options['raw'] = True
        elif arg.startswith('--pattern-file='):
            options['pattern-files'].append(arg[len('--pattern-file='):])
        else:
            options['patterns'] += [arg.upper()]
    return options

def get_default_pattern_files():
    script_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)),
        'grok-patterns')
    home_dir = os.path.join(os.path.expanduser("~"), '.grok-patterns')
    return [script_dir, home_dir]

def print_usage():
    sys.stderr.write("""Usage: %s [--raw] <pattern_name>...

Read and return grok patterns as Ruby regular expressions.

Flags:
--pattern-file=<path>  Load additional pattern files/folders.
--raw                  Print the pattern without recursive substitution.
-h --help              Print usage information.
""" % sys.argv[0])

def print_version():
    sys.stdout.write("Grokpat version %s\n" % __version__)

def parse_patterns(file):
    return [separate_name_from_pattern(line.rstrip()) for line in file
        if not is_blank(line) or is_comment(line)]

def is_blank(line):
    return not line.rstrip()

def is_comment(line):
    return line and line.startswith("#")

def separate_name_from_pattern(line):
    return tuple(line.split(' ', 1))

def expand_grok_subpatterns(pattern, pattern_set):
    grok_subpattern_pattern = '%{.+?}'
    if not re.findall(grok_subpattern_pattern, pattern):
        return pattern
    return expand_grok_subpatterns(re.sub(grok_subpattern_pattern,
        lambda m: pattern_set[m.group()[2:-1]], pattern), pattern_set)

if __name__ == "__main__":
    options = parse_args(sys.argv[1:])
    if not options['patterns']:
        sys.stderr.write("Must be called with a pattern name.\n")
        sys.exit(1)
    main(options['pattern-files'], options['patterns'], options['raw'])
